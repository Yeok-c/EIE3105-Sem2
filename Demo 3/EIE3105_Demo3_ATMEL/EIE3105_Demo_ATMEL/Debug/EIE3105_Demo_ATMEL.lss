
EIE3105_Demo_ATMEL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003d2  00000466  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800102  00800102  00000468  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000939  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054b  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000311  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b4 01 	call	0x368	; 0x368 <main>
  9e:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INT_Init>:
char USART_ReceiveByte(){ //UNUSED IN INTERRUPTS --------- Will wait until byte is received 
	char tChar = 0;
	while ( !(UCSR0A & (1<<RXC0)) ) //While theres no input
	tChar = UDR0;
	return tChar;
}
  a6:	f8 94       	cli
  a8:	14 bc       	out	0x24, r1	; 36
  aa:	15 bc       	out	0x25, r1	; 37
  ac:	16 bc       	out	0x26, r1	; 38
  ae:	8c e7       	ldi	r24, 0x7C	; 124
  b0:	87 bd       	out	0x27, r24	; 39
  b2:	84 b5       	in	r24, 0x24	; 36
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	84 bd       	out	0x24, r24	; 36
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	85 bd       	out	0x25, r24	; 37
  be:	ee e6       	ldi	r30, 0x6E	; 110
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
  c8:	a0 e8       	ldi	r26, 0x80	; 128
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	1c 92       	st	X, r1
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	10 82       	st	Z, r1
  d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  dc:	8d e3       	ldi	r24, 0x3D	; 61
  de:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e2:	89 e0       	ldi	r24, 0x09	; 9
  e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  e8:	1c 92       	st	X, r1
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	80 83       	st	Z, r24
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  f4:	a0 eb       	ldi	r26, 0xB0	; 176
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	1c 92       	st	X, r1
  fa:	e1 eb       	ldi	r30, 0xB1	; 177
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
 100:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 104:	8f e4       	ldi	r24, 0x4F	; 79
 106:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 10a:	8c 91       	ld	r24, X
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	8c 93       	st	X, r24
 110:	80 81       	ld	r24, Z
 112:	82 60       	ori	r24, 0x02	; 2
 114:	80 83       	st	Z, r24
 116:	e0 e7       	ldi	r30, 0x70	; 112
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 83       	st	Z, r24
 120:	78 94       	sei
 122:	08 95       	ret

00000124 <USART_Init>:
 124:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 134:	88 eb       	ldi	r24, 0xB8	; 184
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 13a:	08 95       	ret

0000013c <__vector_19>:
}
*/

unsigned char Transmitted = 1;

ISR(USART_UDRE_vect){		 // Transmit
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
	//Transmitted = 1;
	//UDR0 = '2';
}
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <delay_small>:
	}
}

char delay_small_flag = 1;
void delay_small(){
	while(delay_small_flag == 0);
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 154:	88 23       	and	r24, r24
 156:	f1 f3       	breq	.-4      	; 0x154 <delay_small+0x4>
}
 158:	08 95       	ret

0000015a <writeReadings>:

int B_Read[8];

void writeReadings(){
	unsigned char C_Read = 0;
	if(inputFlag == 1){
 15a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	09 f0       	breq	.+2      	; 0x164 <writeReadings+0xa>
 162:	46 c0       	rjmp	.+140    	; 0x1f0 <writeReadings+0x96>
 164:	e3 e0       	ldi	r30, 0x03	; 3
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	40 e0       	ldi	r20, 0x00	; 0
		for(int i = 0; i < 8; i++){
			C_Read += B_Read[i] << i;
 16e:	21 91       	ld	r18, Z+
 170:	31 91       	ld	r19, Z+
 172:	08 2e       	mov	r0, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <writeReadings+0x20>
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <writeReadings+0x1c>
 17e:	42 0f       	add	r20, r18
int B_Read[8];

void writeReadings(){
	unsigned char C_Read = 0;
	if(inputFlag == 1){
		for(int i = 0; i < 8; i++){
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	91 05       	cpc	r25, r1
 186:	99 f7       	brne	.-26     	; 0x16e <writeReadings+0x14>
	
		//Up_Shift_Left = 129
		//Down_Shift_Left = 130
		//Up_Shift_Right = 33
		//Down_Shift_Right = 34
		switch(C_Read){
 188:	48 30       	cpi	r20, 0x08	; 8
 18a:	d9 f0       	breq	.+54     	; 0x1c2 <writeReadings+0x68>
 18c:	38 f4       	brcc	.+14     	; 0x19c <writeReadings+0x42>
 18e:	42 30       	cpi	r20, 0x02	; 2
 190:	e1 f0       	breq	.+56     	; 0x1ca <writeReadings+0x70>
 192:	44 30       	cpi	r20, 0x04	; 4
 194:	91 f0       	breq	.+36     	; 0x1ba <writeReadings+0x60>
 196:	41 30       	cpi	r20, 0x01	; 1
 198:	61 f0       	breq	.+24     	; 0x1b2 <writeReadings+0x58>
 19a:	08 95       	ret
 19c:	42 32       	cpi	r20, 0x22	; 34
 19e:	29 f1       	breq	.+74     	; 0x1ea <writeReadings+0x90>
 1a0:	18 f4       	brcc	.+6      	; 0x1a8 <writeReadings+0x4e>
 1a2:	41 32       	cpi	r20, 0x21	; 33
 1a4:	f1 f0       	breq	.+60     	; 0x1e2 <writeReadings+0x88>
 1a6:	08 95       	ret
 1a8:	41 38       	cpi	r20, 0x81	; 129
 1aa:	99 f0       	breq	.+38     	; 0x1d2 <writeReadings+0x78>
 1ac:	42 38       	cpi	r20, 0x82	; 130
 1ae:	a9 f0       	breq	.+42     	; 0x1da <writeReadings+0x80>
 1b0:	08 95       	ret
			case 1: UDR0 = 'w'; break;	 //Up
 1b2:	87 e7       	ldi	r24, 0x77	; 119
 1b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1b8:	08 95       	ret
			case 4: UDR0 = 'a'; break;	 //Left
 1ba:	81 e6       	ldi	r24, 0x61	; 97
 1bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c0:	08 95       	ret
			case 8: UDR0 = 'd'; break;	 //Right
 1c2:	84 e6       	ldi	r24, 0x64	; 100
 1c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1c8:	08 95       	ret
			case 2: UDR0 = 'x'; break;	 //Down
 1ca:	88 e7       	ldi	r24, 0x78	; 120
 1cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1d0:	08 95       	ret
			case 129: UDR0 = 'q'; break; //Up_Shift_Left
 1d2:	81 e7       	ldi	r24, 0x71	; 113
 1d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1d8:	08 95       	ret
			case 130: UDR0 = 'z'; break; //Down_Shift_Left
 1da:	8a e7       	ldi	r24, 0x7A	; 122
 1dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1e0:	08 95       	ret
			case 33: UDR0 = 'e'; break;  //Up_Shift_Right
 1e2:	85 e6       	ldi	r24, 0x65	; 101
 1e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1e8:	08 95       	ret
			case 34: UDR0 = 'c'; break;  //Down_Shift_Right
 1ea:	83 e6       	ldi	r24, 0x63	; 99
 1ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1f0:	08 95       	ret

000001f2 <clearReadings>:
		}
		//Serial.write('\n');
	}
}

void clearReadings(){
 1f2:	e3 e0       	ldi	r30, 0x03	; 3
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	83 e1       	ldi	r24, 0x13	; 19
 1f8:	91 e0       	ldi	r25, 0x01	; 1
	for(int i = 0; i < 8; i++){
		B_Read[i] = 0;
 1fa:	11 92       	st	Z+, r1
 1fc:	11 92       	st	Z+, r1
		//Serial.write('\n');
	}
}

void clearReadings(){
	for(int i = 0; i < 8; i++){
 1fe:	e8 17       	cp	r30, r24
 200:	f9 07       	cpc	r31, r25
 202:	d9 f7       	brne	.-10     	; 0x1fa <clearReadings+0x8>
		B_Read[i] = 0;
	}
	inputFlag = 0;
 204:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 208:	08 95       	ret

0000020a <getReadings>:
}

void getReadings(){
 20a:	af 92       	push	r10
 20c:	bf 92       	push	r11
 20e:	cf 92       	push	r12
 210:	df 92       	push	r13
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
	//if(PIND&(1<<PD2) != 0){
	//Use mask to check PD2 bit and then shift it so its 0 or 1 instead of 00010000 or something
	PORTB = 0x00; //Output 0 to all B ports
 21e:	15 b8       	out	0x05, r1	; 5
	delay_small();
 220:	0e 94 a8 00 	call	0x150	; 0x150 <delay_small>
	
	if((PIND & (1 << PD2)) >> PD2 == 0){
 224:	4a 99       	sbic	0x09, 2	; 9
 226:	49 c0       	rjmp	.+146    	; 0x2ba <getReadings+0xb0>
		inputFlag = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		//Something on left side is pressed
		char input = 0;
		PORTB = 0x03;
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	85 b9       	out	0x05, r24	; 5
		delay_small();
 232:	0e 94 a8 00 	call	0x150	; 0x150 <delay_small>
		input |= (PIND & (1 << PD2)) >> PD2 << 1;
 236:	09 b1       	in	r16, 0x09	; 9
		//PIND & (1 << PD2) is a value like 00100000
		//>>PD2 shifts the "1" to the last byte
		//Write that to bit 1 of input
		
		PORTB = 0x05;
 238:	85 e0       	ldi	r24, 0x05	; 5
 23a:	85 b9       	out	0x05, r24	; 5
		delay_small();
 23c:	0e 94 a8 00 	call	0x150	; 0x150 <delay_small>
		input |= (PIND & (1 << PD2)) >> PD2 << 2;
 240:	19 b1       	in	r17, 0x09	; 9
		
		PORTB = 0x06;
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	85 b9       	out	0x05, r24	; 5
		delay_small();
 246:	0e 94 a8 00 	call	0x150	; 0x150 <delay_small>
		input |= (PIND & (1 << PD2)) >> PD2 << 3;
 24a:	29 b1       	in	r18, 0x09	; 9
 24c:	02 fb       	bst	r16, 2
 24e:	aa 24       	eor	r10, r10
 250:	a0 f8       	bld	r10, 0
 252:	b1 2c       	mov	r11, r1
 254:	c5 01       	movw	r24, r10
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	22 fb       	bst	r18, 2
 25c:	ee 24       	eor	r14, r14
 25e:	e0 f8       	bld	r14, 0
 260:	f1 2c       	mov	r15, r1
 262:	ee 0c       	add	r14, r14
 264:	ff 1c       	adc	r15, r15
 266:	ee 0c       	add	r14, r14
 268:	ff 1c       	adc	r15, r15
 26a:	ee 0c       	add	r14, r14
 26c:	ff 1c       	adc	r15, r15
 26e:	e8 2a       	or	r14, r24
 270:	14 70       	andi	r17, 0x04	; 4
 272:	8e 2d       	mov	r24, r14
 274:	81 2b       	or	r24, r17
		
		if(input == 0b00000000) B_Read[0] = 1;
 276:	39 f4       	brne	.+14     	; 0x286 <getReadings+0x7c>
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <B_Read+0x1>
 280:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <B_Read>
 284:	12 c0       	rjmp	.+36     	; 0x2aa <getReadings+0xa0>
		if(input == 0b00001010) B_Read[1] = 1;
 286:	8a 30       	cpi	r24, 0x0A	; 10
 288:	39 f4       	brne	.+14     	; 0x298 <getReadings+0x8e>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <B_Read+0x3>
 292:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <B_Read+0x2>
 296:	11 c0       	rjmp	.+34     	; 0x2ba <getReadings+0xb0>
		if(input == 0b00001100) B_Read[2] = 1;
 298:	8c 30       	cpi	r24, 0x0C	; 12
 29a:	39 f4       	brne	.+14     	; 0x2aa <getReadings+0xa0>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <B_Read+0x5>
 2a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <B_Read+0x4>
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <getReadings+0xb0>
		if(input == 0b00000110) B_Read[3] = 1;
 2aa:	86 30       	cpi	r24, 0x06	; 6
 2ac:	31 f4       	brne	.+12     	; 0x2ba <getReadings+0xb0>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <B_Read+0x7>
 2b6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <B_Read+0x6>
	
	}
	
	PORTB = 0x00; //Output 0 to all B ports
 2ba:	15 b8       	out	0x05, r1	; 5
	delay_small();
 2bc:	0e 94 a8 00 	call	0x150	; 0x150 <delay_small>
	if((PIND & (1 << PD3)) >> PD3 == 0){
 2c0:	4b 99       	sbic	0x09, 3	; 9
 2c2:	47 c0       	rjmp	.+142    	; 0x352 <getReadings+0x148>
		inputFlag = 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		//Something on left side is pressed
		char input = 0;
		PORTB = 0x03;
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	85 b9       	out	0x05, r24	; 5
		delay_small();
 2ce:	0e 94 a8 00 	call	0x150	; 0x150 <delay_small>
		input |= (PIND & (1 << PD3)) >> PD3 << 1;
 2d2:	19 b1       	in	r17, 0x09	; 9
		
		PORTB = 0x05;
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	85 b9       	out	0x05, r24	; 5
		delay_small();
 2d8:	0e 94 a8 00 	call	0x150	; 0x150 <delay_small>
		input |= (PIND & (1 << PD3)) >> PD3 << 2;
 2dc:	89 b1       	in	r24, 0x09	; 9
 2de:	13 fb       	bst	r17, 3
 2e0:	cc 24       	eor	r12, r12
 2e2:	c0 f8       	bld	r12, 0
 2e4:	d1 2c       	mov	r13, r1
 2e6:	cc 0c       	add	r12, r12
 2e8:	dd 1c       	adc	r13, r13
 2ea:	83 fb       	bst	r24, 3
 2ec:	88 27       	eor	r24, r24
 2ee:	80 f9       	bld	r24, 0
 2f0:	c8 2f       	mov	r28, r24
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	d8 2f       	mov	r29, r24
 2f6:	cc 0f       	add	r28, r28
 2f8:	dd 1f       	adc	r29, r29
 2fa:	cc 0f       	add	r28, r28
 2fc:	dd 1f       	adc	r29, r29
 2fe:	cc 29       	or	r28, r12
		
		PORTB = 0x06;
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	85 b9       	out	0x05, r24	; 5
		delay_small();
 304:	0e 94 a8 00 	call	0x150	; 0x150 <delay_small>
		input |= (PIND & (1 << PD3)) >> PD3 << 3;
 308:	89 b1       	in	r24, 0x09	; 9
 30a:	88 70       	andi	r24, 0x08	; 8
 30c:	c8 2b       	or	r28, r24
		
		if(input == 0b00000000) B_Read[4] = 1;
 30e:	39 f4       	brne	.+14     	; 0x31e <getReadings+0x114>
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <B_Read+0x9>
 318:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <B_Read+0x8>
 31c:	12 c0       	rjmp	.+36     	; 0x342 <getReadings+0x138>
		if(input == 0b00001010) B_Read[5] = 1;
 31e:	ca 30       	cpi	r28, 0x0A	; 10
 320:	39 f4       	brne	.+14     	; 0x330 <getReadings+0x126>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <B_Read+0xb>
 32a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <B_Read+0xa>
 32e:	11 c0       	rjmp	.+34     	; 0x352 <getReadings+0x148>
		if(input == 0b00001100) B_Read[6] = 1;
 330:	cc 30       	cpi	r28, 0x0C	; 12
 332:	39 f4       	brne	.+14     	; 0x342 <getReadings+0x138>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <B_Read+0xd>
 33c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <B_Read+0xc>
 340:	08 c0       	rjmp	.+16     	; 0x352 <getReadings+0x148>
		if(input == 0b00000110) B_Read[7] = 1;
 342:	c6 30       	cpi	r28, 0x06	; 6
 344:	31 f4       	brne	.+12     	; 0x352 <getReadings+0x148>
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <B_Read+0xf>
 34e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <B_Read+0xe>
	}
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	08 95       	ret

00000368 <main>:
	//Transmitted = 1;
	//UDR0 = '2';
}

int main(void){
	USART_Init();
 368:	0e 94 92 00 	call	0x124	; 0x124 <USART_Init>
	
	DDRB = 0xFF; //PORTB output port
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //Output 0 to all B ports
 370:	15 b8       	out	0x05, r1	; 5

	//DDRC = 0xFF; //PORTC as output
	//PORTC = 0x00;

	//  DDRD = 0b00000000; //PORTD 0-5 as Input, 6-7 as Output
	DDRD = 0x00; //PORTD as input
 372:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; //Write to PORTD (Activate Pullup)
 374:	8b b9       	out	0x0b, r24	; 11
	
	INT_Init();
 376:	0e 94 53 00 	call	0xa6	; 0xa6 <INT_Init>
	while (1){
		getReadings();
 37a:	0e 94 05 01 	call	0x20a	; 0x20a <getReadings>
		writeReadings();
 37e:	0e 94 ad 00 	call	0x15a	; 0x15a <writeReadings>
		clearReadings();
 382:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <clearReadings>
 386:	f9 cf       	rjmp	.-14     	; 0x37a <main+0x12>

00000388 <__vector_14>:
		if(input == 0b00001100) B_Read[6] = 1;
		if(input == 0b00000110) B_Read[7] = 1;
	}
}

ISR(TIMER0_COMPA_vect){
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
}
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <__vector_11>:

ISR(TIMER1_COMPA_vect){//timer1 interrupt 1Hz toggles pin 13 (LED)
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1

}
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <__vector_7>:

ISR(TIMER2_COMPA_vect){//40 micro sec clock
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	8f 93       	push	r24
	delay_small_flag = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3c2:	8f 91       	pop	r24
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
